<!-- Demo Behavior -->
<root main_tree_to_execute = "MainTree" >
    <BehaviorTree ID="MainTree">
        <ReactiveSequence name="root">
            <AIP_isAt  name="init_pose" goal="0; 2; -4.0; -1.0; -1.57; -1.57; 0.0; -0.0; -1.3; 0.0; 2.1; 0.75; 0; -1"/>
            <ReactiveFallback>
                <ConditionisHolding  name="Is the robot holding?" message="First fallback..." />
                <AIP_isHolding    goal="0; 0; -1.0; -5.2; 0; -1.57; 0.0; -0.0; -1.3; 0.0; 2.1; 0.75; 1; 0"/>
            </ReactiveFallback>
            <!--ConditionisAt  name="Is the robot at final position?" message="Second fallback..." /-->
            <ReactiveFallback>
                <ConditionisReachable name="Is the target reachable?" message="Second fallback..." />
                <AIP_isAt    name="reaching_basket" goal="0; 1; 4; -0.7; 0.0; +1.57; 0.0; -0.0; -1.3; 0.0; 2.1; 0.75; 0; 1"/>
            </ReactiveFallback>
            <AIP_isHolding    goal="1; 0; -1.0; -5.1; 0; -1.57; 0.0; -0.0; -1.3; 0.0; 2.1; 0.75; 1; -1"/>
        </ReactiveSequence>
    </BehaviorTree>
</root>

<!--  USAGE of the entry "goal" for any AIP_* node:
      goal = "prior; state_index; parameters[*]"

          - prior: this is an int indicating the preferred state. For now it can be 0 or 1, i.e. 0 means isHolding is
                   satisfied, 1 means it is not.
          - state_index: this is an int which indicates which is the desired state on which we should achieve the given
                         prior. The states order: isHolding, isReachable, isAt (indexes are then 0, 1, 2)

          - parameters: this is an array of n elements which can possibly vary in length. For now the parameters for the
                        available actions are:
                             isHolding: (joint_conf[10]; type_of_motion; obj_id)
                             isReachable: (joint_conf[10]; type_of_motion; obj_id)
                             isAt: (joint_conf[10]; type_of_motion; obj_id)

                        The joint_conf[10] is an array of 10 entries specifying the joint conf. for the mobile manipul.
                            to be used with the MPC.
                        The type_of_motion is related to the MPc. It can be 0 = navigation, 1 = fine motion
                        The onj_id will be used to retrieve object properties from the parameter server and in the
                            future from the knowledge base.
                            0 = objPose
                            1 = basketPose
-->
